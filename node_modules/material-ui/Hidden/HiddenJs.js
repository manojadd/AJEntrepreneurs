'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _breakpoints = require('../styles/breakpoints');

var _withWidth = require('../utils/withWidth');

var _withWidth2 = _interopRequireDefault(_withWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_HiddenProps = require('./types').babelPluginFlowReactPropTypes_proptype_HiddenProps || require('prop-types').any;

/**
 * Responsively hides by omission.
 */
function HiddenJs(props) {
  var children = props.children,
      ComponentProp = props.component,
      only = props.only,
      xsUp = props.xsUp,
      smUp = props.smUp,
      mdUp = props.mdUp,
      lgUp = props.lgUp,
      xlUp = props.xlUp,
      xsDown = props.xsDown,
      smDown = props.smDown,
      mdDown = props.mdDown,
      lgDown = props.lgDown,
      xlDown = props.xlDown,
      width = props.width,
      other = (0, _objectWithoutProperties3.default)(props, ['children', 'component', 'only', 'xsUp', 'smUp', 'mdUp', 'lgUp', 'xlUp', 'xsDown', 'smDown', 'mdDown', 'lgDown', 'xlDown', 'width']);


  var visible = true;

  // `only` check is faster to get out sooner if used.
  if (only) {
    if (Array.isArray(only)) {
      for (var i = 0; i < only.length; i += 1) {
        var breakpoint = only[i];
        if (width === breakpoint) {
          visible = false;
          break;
        }
      }
    } else if (only && width === only) {
      visible = false;
    }
  }

  // Allow `only` to be combined with other props. If already hidden, no need to check others.
  if (visible) {
    // determine visibility based on the smallest size up
    for (var _i = 0; _i < _breakpoints.keys.length; _i += 1) {
      var _breakpoint = _breakpoints.keys[_i];
      var breakpointUp = props[_breakpoint + 'Up'];
      var breakpointDown = props[_breakpoint + 'Down'];
      if (breakpointUp && (0, _withWidth.isWidthUp)(width, _breakpoint) || breakpointDown && (0, _withWidth.isWidthDown)(width, _breakpoint, true)) {
        visible = false;
        break;
      }
    }
  }

  if (!visible) {
    return null;
  }

  // render `string | Function` with any optional props
  if (typeof ComponentProp === 'string' || typeof ComponentProp === 'function') {
    return _react2.default.createElement(
      ComponentProp,
      other,
      children
    );
  }

  // render any Element exactly as given
  if ((0, _react.isValidElement)(ComponentProp)) {
    return _react2.default.Children.only(ComponentProp);
  }

  throw new Error('Invalid component: ' + (typeof ComponentProp === 'undefined' ? 'undefined' : (0, _typeof3.default)(ComponentProp)));
}

exports.default = (0, _withWidth2.default)()(HiddenJs);